# Generated by Django 5.1.5 on 2025-01-26 03:43

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.UUIDField(db_comment='Identificador único del Tipo de Producto.', default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID del Tipo de Producto')),
                ('name', models.CharField(db_comment="Nombre del Tipo de Producto (por ejemplo, 'Sodas').", max_length=255, unique=True, verbose_name='Nombre del Tipo de Producto')),
            ],
            options={
                'verbose_name': 'Tipo de Producto',
                'verbose_name_plural': 'Tipos de Producto',
                'db_table': '"inventory"."product_type"',
                'db_table_comment': "Tipo de Producto: Representa una categoría que agrupa productos similares, como 'Sodas' o 'Jugos'.",
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(db_comment='Identificador único de la Etiqueta.', default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID de la Etiqueta')),
                ('name', models.CharField(db_comment="Nombre de la Etiqueta (por ejemplo, 'descuento', 'nuevo', 'innovativo').", max_length=100, unique=True, verbose_name='Nombre de la Etiqueta')),
            ],
            options={
                'verbose_name': 'Etiqueta',
                'verbose_name_plural': 'Etiquetas',
                'db_table': '"inventory"."tag"',
                'db_table_comment': 'Etiqueta: Almacena palabras clave o categorías que se pueden asociar a productos.',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.UUIDField(db_comment='Identificador único de la Marca.', default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID de la Marca')),
                ('name', models.CharField(db_comment='Nombre de la Marca.', verbose_name='Nombre de la Marca')),
                ('stakeholder', models.ForeignKey(db_comment='Stakeholder (Tercero) propietario de la marca.', on_delete=django.db.models.deletion.PROTECT, to='core.stakeholder', verbose_name='Stakeholder')),
            ],
            options={
                'verbose_name': 'Marca',
                'verbose_name_plural': 'Marcas',
                'db_table': '"inventory"."brand"',
                'db_table_comment': 'Marca: Representa una identidad comercial asociada a un Stakeholder (Tercero).',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(db_comment='Identificador único del Producto.', default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID del Producto')),
                ('name', models.CharField(db_comment='Nombre del Producto.', max_length=255, verbose_name='Nombre del Producto')),
                ('brand', models.ForeignKey(db_comment='Marca a la que pertenece el Producto.', on_delete=django.db.models.deletion.PROTECT, to='inventory.brand', verbose_name='Marca')),
                ('product_type', models.ForeignKey(db_comment='Tipo de Producto al que pertenece el Producto.', on_delete=django.db.models.deletion.PROTECT, to='inventory.producttype', verbose_name='Tipo de Producto')),
            ],
            options={
                'verbose_name': 'Producto',
                'verbose_name_plural': 'Productos',
                'db_table': '"inventory"."product"',
                'db_table_comment': 'Producto: Representa un artículo específico que se vende o distribuye, asociado a una Marca y un Tipo de Producto.',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.UUIDField(db_comment='Identificador único del registro de Inventario.', default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID del Inventario')),
                ('quantity', models.IntegerField(db_comment='Cantidad disponible del producto en stock.', verbose_name='Cantidad')),
                ('product', models.ForeignKey(db_comment='Producto al que pertenece el registro de Inventario.', on_delete=django.db.models.deletion.PROTECT, to='inventory.product', verbose_name='Producto')),
            ],
            options={
                'verbose_name': 'Inventario',
                'verbose_name_plural': 'Inventarios',
                'db_table': '"inventory"."inventory"',
                'db_table_comment': 'Inventario: Almacena la cantidad disponible de un producto específico en stock.',
            },
        ),
        migrations.CreateModel(
            name='UserProduct',
            fields=[
                ('id', models.UUIDField(db_comment='Identificador único del registro de UserProduct.', default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID de UserProduct')),
                ('price', models.DecimalField(db_comment='Precio diferenciado del producto para el usuario.', decimal_places=2, max_digits=10, verbose_name='Precio')),
                ('recommendation_rating', models.DecimalField(db_comment='Calificación de recomendación del producto para el usuario. Debe ser un valor decimal entre 0.00 (Muy mal) y 100.00 (Excelente).', decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0.0, 'La calificación mínima es 0.00 (Muy mal)'), django.core.validators.MaxValueValidator(100.0, 'La calificación máxima es 100.00 (Excelente)')], verbose_name='Calificación de Recomendación')),
                ('product', models.ForeignKey(db_comment='Producto al que se aplica el precio diferenciado.', on_delete=django.db.models.deletion.PROTECT, to='inventory.product', verbose_name='Producto')),
                ('user', models.ForeignKey(db_comment='Usuario al que se aplica el precio diferenciado.', on_delete=django.db.models.deletion.PROTECT, to='core.user', verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Producto de Usuario',
                'verbose_name_plural': 'Productos de Usuario',
                'db_table': '"inventory"."user_product"',
                'db_table_comment': 'Producto de Usuario: Almacena un precio diferenciado y una calificación de recomendación para un producto específico para un usuario.',
                'unique_together': {('product', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.UUIDField(db_comment='Identificador único de la relación Producto-Etiqueta.', default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID de Producto-Etiqueta')),
                ('product', models.ForeignKey(db_comment='Producto asociado a la etiqueta.', on_delete=django.db.models.deletion.CASCADE, to='inventory.product', verbose_name='Producto')),
                ('tag', models.ForeignKey(db_comment='Etiqueta asociada al producto.', on_delete=django.db.models.deletion.CASCADE, to='inventory.tag', verbose_name='Etiqueta')),
            ],
            options={
                'verbose_name': 'Producto-Etiqueta',
                'verbose_name_plural': 'Productos-Etiquetas',
                'db_table': '"inventory"."product_tag"',
                'db_table_comment': 'Producto-Etiqueta: Tabla intermedia para la relación muchos a muchos entre Productos y Etiquetas.',
                'constraints': [models.UniqueConstraint(fields=('product', 'tag'), name='unique_toghether_product_tag')],
            },
        ),
        migrations.CreateModel(
            name='UserProductTag',
            fields=[
                ('id', models.UUIDField(db_comment='Identificador único de la relación UserProduct-Etiqueta.', default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID de UserProduct-Etiqueta')),
                ('rating', models.DecimalField(db_comment='Calificación que determina el impacto de la etiqueta en el producto para el usuario.', decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0.0, 'La calificación mínima es 0.00 (Sin impacto)'), django.core.validators.MaxValueValidator(100.0, 'La calificación máxima es 100.00 (Máximo impacto)')], verbose_name='Calificación de Impacto')),
                ('tag', models.ForeignKey(db_comment='Etiqueta asociada al UserProduct.', on_delete=django.db.models.deletion.CASCADE, to='inventory.tag', verbose_name='Etiqueta')),
                ('userProduct', models.ForeignKey(db_comment='UserProduct asociado a la etiqueta.', on_delete=django.db.models.deletion.CASCADE, to='inventory.userproduct', verbose_name='UserProduct')),
            ],
            options={
                'verbose_name': 'UserProduct-Etiqueta',
                'verbose_name_plural': 'UserProducts-Etiquetas',
                'db_table': '"inventory"."user_product_tag"',
                'db_table_comment': 'UserProduct-Etiqueta: Tabla intermedia para la relación muchos a muchos entre UserProducts y Etiquetas.',
                'constraints': [models.UniqueConstraint(fields=('userProduct', 'tag'), name='unique_together_userproduct_tag')],
            },
        ),
    ]
